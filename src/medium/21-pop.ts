// 配列の最後の要素を削除した配列を返す型の実装

type Pop<T extends unknown[]> = T extends [...infer U, infer _] ? U : never;

type test21_1 = Pop<[1, 2, 3]>; // [1, 2]
type test21_2 = Pop<["a", "b", "c", "d"]>; // ["a", "b", "c"]
type test21_3 = Pop<[]>; // never



// 学び

// (今回の)...infer U
// inferは型推論する演算子
// Uは型推論を保持するための変数
// 「...」は可変長の要素を表現している

// inferによる型推論で具体的な要素が含まれた型が推論されるのはなぜか？
// -> TypeScriptは可能な限り具体的な型を推論するから
// 具体的な配列リテラル型([1, 2, 3])の場合、その構造をそのまま保持する。
// 一般的な配列型(number[])の場合、抽象的な型のままになる。

// -> T extends unknown[]にすることで配列のみに制約
// -> 要素を持つ配列リテラル型を受け取るので、その構造を保持する


// infer _とは
// [...infer U, infer _] のinfer _の部分は配列の最後の要素を表している
// 「_」はts, jsでの慣習的な変数名で、「使用しない変数」を意味する